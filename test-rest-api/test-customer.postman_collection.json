{
	"info": {
		"_postman_id": "f0ee85a6-e732-4f8d-b6bf-0f3531059a1d",
		"name": "test-customer",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get before login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var mockResp = {\"_error\":\"Not logged in\"}",
							"var response = pm.response.json()",
							"",
							"pm.test('Check that i am not logged in from start', () => {",
							"    pm.expect(response).to.eql(mockResp)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login as user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var mockResp = {\"id\":1,\"email\":\"user@gmail.com\",\"firstName\":\"Brewer\",\"lastName\":\"McKibbin\",\"userRole\":\"user\"}",
							"let response = pm.response.json()",
							"",
							"pm.test('Check that i was able to log in', () => {",
							"    pm.expect(response).to.eql(mockResp)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"user@gmail.com\",\n    \"password\": \"12345678\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get my orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"",
							"pm.test(\"Check that response code is 200 (ok) when customer tries to access my-orders\", function(){",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/my-orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"my-orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create product as customer",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set('name', \"Fenngreek Seed\");",
							"pm.environment.set('description', \"Nam ultrices, libero non mattis pulvinar, nulla pede ullamcorper augue, a suscipit nulla elit ac nulla. Sed vel enim sit amet nunc viverra dapibus. Nulla suscipit ligula in lacus.\");",
							"pm.environment.set('price', 136);",
							"pm.environment.set('img_link', \"http://dummyimage.com/210x100.png/5fa2dd/ffffff\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"",
							"pm.test(\"Check that response code is 405 when visitor tries to create a product\", function(){",
							"    pm.expect(pm.response.code).to.equal(405);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"price\": \"{{price}}\",\n    \"img_link\": \"{{img_link}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Try to get all customers as customer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Check that response code is 405 when visitor tries to access customers\", function(){\r",
							"    pm.expect(pm.response.code).to.equal(405);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/customers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"customers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Try to update product as user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Check that response code is 405 when visitor tries to uppdate product information on product with id: 1\", function(){\r",
							"    pm.expect(pm.response.code).to.equal(405);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Bromstick\",\r\n    \"description\": \"Nimbus 2022, the finest Bromstick on the market.\",\r\n    \"price\": \"40000\",\r\n    \"img_link\": \"https://pm1.narvii.com/6811/0e5571c84bb32b44e5c7e506b53b74ab64f2ad82v2_hq.jpg\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/products/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var mockResp = {\"success\":\"logged out\"}",
							"var response = pm.response.json()",
							"",
							"pm.test('Check that i was logged out', () => {",
							"    pm.expect(response).to.eql(mockResp)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		}
	]
}